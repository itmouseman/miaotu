package com.widget.miaotu.common.greedao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.widget.miaotu.http.bean.SeedlingInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SEEDLING_INFO".
*/
public class SeedlingInfoDao extends AbstractDao<SeedlingInfo, Long> {

    public static final String TABLENAME = "SEEDLING_INFO";

    /**
     * Properties of entity SeedlingInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BaseName = new Property(1, String.class, "baseName", false, "BASE_NAME");
        public final static Property BeginLetter = new Property(2, String.class, "beginLetter", false, "BEGIN_LETTER");
        public final static Property CommonNames = new Property(3, String.class, "commonNames", false, "COMMON_NAMES");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifyTime = new Property(5, String.class, "modifyTime", false, "MODIFY_TIME");
    }


    public SeedlingInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SeedlingInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEEDLING_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BASE_NAME\" TEXT," + // 1: baseName
                "\"BEGIN_LETTER\" TEXT," + // 2: beginLetter
                "\"COMMON_NAMES\" TEXT," + // 3: commonNames
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"MODIFY_TIME\" TEXT);"); // 5: modifyTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEEDLING_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SeedlingInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String baseName = entity.getBaseName();
        if (baseName != null) {
            stmt.bindString(2, baseName);
        }
 
        String beginLetter = entity.getBeginLetter();
        if (beginLetter != null) {
            stmt.bindString(3, beginLetter);
        }
 
        String commonNames = entity.getCommonNames();
        if (commonNames != null) {
            stmt.bindString(4, commonNames);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(6, modifyTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SeedlingInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String baseName = entity.getBaseName();
        if (baseName != null) {
            stmt.bindString(2, baseName);
        }
 
        String beginLetter = entity.getBeginLetter();
        if (beginLetter != null) {
            stmt.bindString(3, beginLetter);
        }
 
        String commonNames = entity.getCommonNames();
        if (commonNames != null) {
            stmt.bindString(4, commonNames);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(6, modifyTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SeedlingInfo readEntity(Cursor cursor, int offset) {
        SeedlingInfo entity = new SeedlingInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // baseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // beginLetter
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commonNames
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // modifyTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SeedlingInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBaseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBeginLetter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommonNames(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModifyTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SeedlingInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SeedlingInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SeedlingInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
